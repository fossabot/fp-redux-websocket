import { getCloseReasonDescription } from './utils';

// These message are user-generated
export const WEBSOCKET_CONNECT = 'WEBSOCKET:CONNECT';
export const WEBSOCKET_DISCONNECT = 'WEBSOCKET:DISCONNECT';
export const WEBSOCKET_SEND_MESSAGE = 'WEBSOCKET:SEND_MESSAGE';

// These messages are generated by WebSocket
export const WEBSOCKET_CONNECTING = 'WEBSOCKET:CONNECTING';
export const WEBSOCKET_OPEN = 'WEBSOCKET:OPEN';
export const WEBSOCKET_CLOSED = 'WEBSOCKET:CLOSED';
export const WEBSOCKET_MESSAGE_RECEIVED = 'WEBSOCKET:MESSAGE_RECEIVED';

export const WEBSOCKET_ERROR = 'WEBSOCKET:ERROR';


export const wsConnect = (url: string): ConnectAction => ({
  type: WEBSOCKET_CONNECT,
  url,
});


export const wsDisconnect = (url: ?string): DisconnectAction => ({
  type: WEBSOCKET_DISCONNECT,
  ...(url ? { url } : {}),
});


export const sendMessage = (message: string, url?: ?string): SendMessageAction => ({
  type: WEBSOCKET_SEND_MESSAGE,
  message,
  ...(url ? { url } : {}),
});


// eslint-disable-next-line flowtype/no-weak-flow-typed,flowtype/no-weak-types
export const sendObject = (object: Object, url: ?string): SendMessageAction => ({
  type: WEBSOCKET_SEND_MESSAGE,
  message: JSON.stringify(object),
  ...(url ? { url } : {}),
});


// These actions are more concerned with connection state
// and are trigged async by the WebSocketMiddleware
export const connecting = (websocket: WebSocket): ConnectingAction => ({
  type: WEBSOCKET_CONNECTING,
  timeStamp: new Date(),
  websocket,
});

export const open = (websocket: WebSocket): OpenAction => ({
  type: WEBSOCKET_OPEN,
  timeStamp: new Date(),
  websocket,
});

export const closed = (event: CloseEvent, websocket: WebSocket): ClosedAction => ({
  type: WEBSOCKET_CLOSED,
  timeStamp: new Date(),
  event,
  reason: getCloseReasonDescription(event),
  websocket,
});

export const messageReceived =
  (event: MessageEvent, websocket: WebSocket): MessageReceivedAction => ({
    type: WEBSOCKET_MESSAGE_RECEIVED,
    timeStamp: new Date(),
    message: typeof event.data === 'string' ? event.data : 'Not string message',
    websocket,
  });

export const error = (event: string | Error, url: string): ErrorMessageAction => ({
  type: WEBSOCKET_ERROR,
  timeStamp: new Date(),
  message: typeof event === 'string' ? event : event.message,
  url,
});

